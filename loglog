Load data...
train_data (16733, 4096, 9) train_label (16733, 4096)
test_data (6852, 4096, 9) test_label (6852, 4096)
GACNet(
  (sa1): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(9, 32, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa2): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa3): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa4): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (fp4): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp3): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(384, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp2): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(320, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp1): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (2): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (conv1): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
  (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (drop1): Dropout(p=0, inplace=False)
  (conv2): Conv1d(128, 13, kernel_size=(1,), stride=(1,))
)
Training from scratch
torch.Size([24, 4096, 9])
torch.float32
torch.Size([24, 4096])
torch.uint8
torch.float32
torch.int64
torch.Size([24, 9, 4096])
torch.Size([24, 9, 4096])
torch.float32
torch.Size([24, 4096])
torch.int64
torch.Size([24, 3, 4096])
torch.float32
tensor([[[-0.2260, -0.2840,  0.4130,  ...,  0.0930,  0.2720, -0.0130],
         [-0.4230, -0.4260, -0.4650,  ..., -0.4210, -0.4180, -0.4240],
         [ 1.9610,  1.9020,  0.0180,  ...,  1.8190,  1.0490,  2.1260]],

        [[-0.3000, -0.4690,  0.2450,  ...,  0.0180,  0.0190,  0.2460],
         [ 0.3930,  0.4880, -0.1050,  ..., -0.0350,  0.3860, -0.4190],
         [ 0.0900,  3.4650,  0.1250,  ...,  0.1150,  3.4630,  0.1260]],

        [[-0.4960, -0.4940, -0.4600,  ..., -0.4710, -0.4720, -0.4690],
         [ 0.1240,  0.0420,  0.2300,  ..., -0.1300, -0.0510,  0.2720],
         [ 3.4340,  3.3370,  7.2240,  ...,  5.9310,  5.0720,  5.4010]],

        ...,

        [[ 0.0790,  0.4340,  0.2200,  ...,  0.2690, -0.4260,  0.3040],
         [ 0.1570,  0.2010,  0.0640,  ...,  0.4950,  0.3200,  0.0190],
         [ 3.1450,  0.8450,  1.1870,  ...,  3.1450,  3.1570,  1.3150]],

        [[-0.4890,  0.1680, -0.3000,  ...,  0.4540, -0.4700,  0.0510],
         [-0.0140, -0.4950, -0.3180,  ...,  0.3930, -0.1540, -0.4940],
         [ 3.4290,  5.6590,  4.8360,  ...,  2.6300,  5.4740,  5.7110]],

        [[ 0.2060,  0.1840, -0.0760,  ..., -0.3130,  0.4040, -0.4980],
         [ 0.4910,  0.1710, -0.2910,  ...,  0.1030, -0.2760, -0.2300],
         [ 0.3620,  0.3550,  3.7010,  ...,  3.7100,  0.3740,  0.8670]]],
       device='cuda:0')
torch.Size([24, 6, 4096])
torch.float32
tensor([[[0.6196, 0.6039, 0.3059,  ..., 0.6667, 0.6902, 0.6314],
         [0.5961, 0.6039, 0.3059,  ..., 0.6471, 0.6706, 0.5882],
         [0.4706, 0.4706, 0.2745,  ..., 0.5725, 0.5922, 0.4784],
         [0.0740, 0.0724, 0.0910,  ..., 0.0825, 0.0872, 0.0796],
         [0.5158, 0.5150, 0.5053,  ..., 0.5163, 0.5170, 0.5155],
         [0.6668, 0.6467, 0.0061,  ..., 0.6185, 0.3567, 0.7229]],

        [[0.1686, 0.7333, 0.2745,  ..., 0.1255, 0.7922, 0.1882],
         [0.1569, 0.7451, 0.2784,  ..., 0.1294, 0.8078, 0.1882],
         [0.1294, 0.7725, 0.2588,  ..., 0.1098, 0.8196, 0.1804],
         [0.3185, 0.3081, 0.3519,  ..., 0.3380, 0.3380, 0.3519],
         [0.6622, 0.6689, 0.6271,  ..., 0.6321, 0.6617, 0.6050],
         [0.0238, 0.9164, 0.0331,  ..., 0.0304, 0.9159, 0.0333]],

        [[0.6000, 0.6196, 0.6510,  ..., 0.7373, 0.3412, 0.7373],
         [0.6039, 0.6235, 0.6588,  ..., 0.7451, 0.3490, 0.7608],
         [0.5804, 0.6039, 0.6471,  ..., 0.7412, 0.2980, 0.7529],
         [0.0024, 0.0029, 0.0130,  ..., 0.0097, 0.0094, 0.0103],
         [0.7178, 0.7036, 0.7363,  ..., 0.6736, 0.6874, 0.7436],
         [0.4491, 0.4364, 0.9447,  ..., 0.7756, 0.6633, 0.7063]],

        ...,

        [[0.4157, 0.1333, 0.3176,  ..., 0.4706, 0.3255, 0.6039],
         [0.3569, 0.1216, 0.2902,  ..., 0.3961, 0.2824, 0.5412],
         [0.2353, 0.1020, 0.2196,  ..., 0.2667, 0.2039, 0.4824],
         [0.8029, 0.8212, 0.8101,  ..., 0.8127, 0.7769, 0.8145],
         [0.7352, 0.7381, 0.7291,  ..., 0.7575, 0.7459, 0.7261],
         [0.7771, 0.2088, 0.2933,  ..., 0.7771, 0.7801, 0.3249]],

        [[0.6706, 0.4000, 0.6471,  ..., 0.5412, 0.5333, 0.3490],
         [0.6902, 0.3961, 0.6549,  ..., 0.5137, 0.5373, 0.3608],
         [0.6745, 0.3804, 0.7137,  ..., 0.4000, 0.5451, 0.3333],
         [0.0124, 0.2060, 0.0681,  ..., 0.2902, 0.0180, 0.1715],
         [0.0860, 0.0023, 0.0331,  ..., 0.1568, 0.0616, 0.0024],
         [0.4484, 0.7400, 0.6324,  ..., 0.3439, 0.7158, 0.7468]],

        [[0.3137, 0.3294, 0.7961,  ..., 0.6627, 0.3765, 0.2157],
         [0.3216, 0.3294, 0.8196,  ..., 0.6824, 0.3647, 0.1843],
         [0.2784, 0.2824, 0.8196,  ..., 0.6980, 0.3294, 0.0941],
         [0.4487, 0.4475, 0.4341,  ..., 0.4219, 0.4589, 0.4124],
         [0.2960, 0.2749, 0.2444,  ..., 0.2704, 0.2454, 0.2485],
         [0.0894, 0.0877, 0.9145,  ..., 0.9167, 0.0924, 0.2142]]],
       device='cuda:0')
in GACNet, you will get xyz and point
Here, xyz.shape and point.shape are
torch.Size([24, 3, 4096])
torch.Size([24, 6, 4096])
tensor([[[-0.2260, -0.2840,  0.4130,  ...,  0.0930,  0.2720, -0.0130],
         [-0.4230, -0.4260, -0.4650,  ..., -0.4210, -0.4180, -0.4240],
         [ 1.9610,  1.9020,  0.0180,  ...,  1.8190,  1.0490,  2.1260]],

        [[-0.3000, -0.4690,  0.2450,  ...,  0.0180,  0.0190,  0.2460],
         [ 0.3930,  0.4880, -0.1050,  ..., -0.0350,  0.3860, -0.4190],
         [ 0.0900,  3.4650,  0.1250,  ...,  0.1150,  3.4630,  0.1260]],

        [[-0.4960, -0.4940, -0.4600,  ..., -0.4710, -0.4720, -0.4690],
         [ 0.1240,  0.0420,  0.2300,  ..., -0.1300, -0.0510,  0.2720],
         [ 3.4340,  3.3370,  7.2240,  ...,  5.9310,  5.0720,  5.4010]],

        ...,

        [[ 0.0790,  0.4340,  0.2200,  ...,  0.2690, -0.4260,  0.3040],
         [ 0.1570,  0.2010,  0.0640,  ...,  0.4950,  0.3200,  0.0190],
         [ 3.1450,  0.8450,  1.1870,  ...,  3.1450,  3.1570,  1.3150]],

        [[-0.4890,  0.1680, -0.3000,  ...,  0.4540, -0.4700,  0.0510],
         [-0.0140, -0.4950, -0.3180,  ...,  0.3930, -0.1540, -0.4940],
         [ 3.4290,  5.6590,  4.8360,  ...,  2.6300,  5.4740,  5.7110]],

        [[ 0.2060,  0.1840, -0.0760,  ..., -0.3130,  0.4040, -0.4980],
         [ 0.4910,  0.1710, -0.2910,  ...,  0.1030, -0.2760, -0.2300],
         [ 0.3620,  0.3550,  3.7010,  ...,  3.7100,  0.3740,  0.8670]]],
       device='cuda:0')
tensor([[[0.6196, 0.6039, 0.3059,  ..., 0.6667, 0.6902, 0.6314],
         [0.5961, 0.6039, 0.3059,  ..., 0.6471, 0.6706, 0.5882],
         [0.4706, 0.4706, 0.2745,  ..., 0.5725, 0.5922, 0.4784],
         [0.0740, 0.0724, 0.0910,  ..., 0.0825, 0.0872, 0.0796],
         [0.5158, 0.5150, 0.5053,  ..., 0.5163, 0.5170, 0.5155],
         [0.6668, 0.6467, 0.0061,  ..., 0.6185, 0.3567, 0.7229]],

        [[0.1686, 0.7333, 0.2745,  ..., 0.1255, 0.7922, 0.1882],
         [0.1569, 0.7451, 0.2784,  ..., 0.1294, 0.8078, 0.1882],
         [0.1294, 0.7725, 0.2588,  ..., 0.1098, 0.8196, 0.1804],
         [0.3185, 0.3081, 0.3519,  ..., 0.3380, 0.3380, 0.3519],
         [0.6622, 0.6689, 0.6271,  ..., 0.6321, 0.6617, 0.6050],
         [0.0238, 0.9164, 0.0331,  ..., 0.0304, 0.9159, 0.0333]],

        [[0.6000, 0.6196, 0.6510,  ..., 0.7373, 0.3412, 0.7373],
         [0.6039, 0.6235, 0.6588,  ..., 0.7451, 0.3490, 0.7608],
         [0.5804, 0.6039, 0.6471,  ..., 0.7412, 0.2980, 0.7529],
         [0.0024, 0.0029, 0.0130,  ..., 0.0097, 0.0094, 0.0103],
         [0.7178, 0.7036, 0.7363,  ..., 0.6736, 0.6874, 0.7436],
         [0.4491, 0.4364, 0.9447,  ..., 0.7756, 0.6633, 0.7063]],

        ...,

        [[0.4157, 0.1333, 0.3176,  ..., 0.4706, 0.3255, 0.6039],
         [0.3569, 0.1216, 0.2902,  ..., 0.3961, 0.2824, 0.5412],
         [0.2353, 0.1020, 0.2196,  ..., 0.2667, 0.2039, 0.4824],
         [0.8029, 0.8212, 0.8101,  ..., 0.8127, 0.7769, 0.8145],
         [0.7352, 0.7381, 0.7291,  ..., 0.7575, 0.7459, 0.7261],
         [0.7771, 0.2088, 0.2933,  ..., 0.7771, 0.7801, 0.3249]],

        [[0.6706, 0.4000, 0.6471,  ..., 0.5412, 0.5333, 0.3490],
         [0.6902, 0.3961, 0.6549,  ..., 0.5137, 0.5373, 0.3608],
         [0.6745, 0.3804, 0.7137,  ..., 0.4000, 0.5451, 0.3333],
         [0.0124, 0.2060, 0.0681,  ..., 0.2902, 0.0180, 0.1715],
         [0.0860, 0.0023, 0.0331,  ..., 0.1568, 0.0616, 0.0024],
         [0.4484, 0.7400, 0.6324,  ..., 0.3439, 0.7158, 0.7468]],

        [[0.3137, 0.3294, 0.7961,  ..., 0.6627, 0.3765, 0.2157],
         [0.3216, 0.3294, 0.8196,  ..., 0.6824, 0.3647, 0.1843],
         [0.2784, 0.2824, 0.8196,  ..., 0.6980, 0.3294, 0.0941],
         [0.4487, 0.4475, 0.4341,  ..., 0.4219, 0.4589, 0.4124],
         [0.2960, 0.2749, 0.2444,  ..., 0.2704, 0.2454, 0.2485],
         [0.0894, 0.0877, 0.9145,  ..., 0.9167, 0.0924, 0.2142]]],
       device='cuda:0')
torch.Size([24, 4096, 3])
in this function, sample_and_group
xyz.shape is torch.Size([24, 4096, 3])
points.shape is torch.Size([24, 4096, 6])
npoint 1024
radius 0.1
nsample 32
farthest_point_sample begin
xyz.shape is
torch.Size([24, 4096, 3])
centroids.shape is
torch.Size([24, 1024])
distance.shape is
torch.Size([24, 4096])
farthest.shape is
torch.Size([24])
batch_indices.shape is
torch.Size([24])
npoint is 
1024


centroid.shape is
torch.Size([24, 1, 3])
fps_idx is torch.Size([24, 1024])
tensor([[3345, 2504,  834,  ..., 1171, 1018, 3623],
        [ 869,  928, 3264,  ...,  709, 3595,  503],
        [3300, 2103, 2240,  ..., 3345, 2379, 3403],
        ...,
        [2980, 2035, 2616,  ..., 3215, 3039, 3522],
        [1307, 2753, 1354,  ..., 1115, 2012,  420],
        [1399, 2995,  182,  ..., 2427, 2720, 3824]], device='cuda:0')


torch.Size([24, 1024, 3])
in this function, sample_and_group
xyz.shape is torch.Size([24, 1024, 3])
points.shape is torch.Size([24, 1024, 64])
npoint 256
radius 0.2
nsample 32
farthest_point_sample begin
xyz.shape is
torch.Size([24, 1024, 3])
centroids.shape is
torch.Size([24, 256])
distance.shape is
torch.Size([24, 1024])
farthest.shape is
torch.Size([24])
batch_indices.shape is
torch.Size([24])
npoint is 
256


centroid.shape is
torch.Size([24, 1, 3])
fps_idx is torch.Size([24, 256])
tensor([[ 820,   74,  857,  ...,  644, 1018,  567],
        [ 107,   61,    3,  ...,  339,  272,  518],
        [ 553,    2,    1,  ...,  803,  220,  280],
        ...,
        [  39,    7,    5,  ...,  285,  281,  283],
        [ 255,    1,    2,  ...,  277,  336,  797],
        [ 762,  589,    8,  ...,  272,  273,  298]], device='cuda:0')


torch.Size([24, 256, 3])
in this function, sample_and_group
xyz.shape is torch.Size([24, 256, 3])
points.shape is torch.Size([24, 256, 128])
npoint 64
radius 0.4
nsample 32
farthest_point_sample begin
xyz.shape is
torch.Size([24, 256, 3])
centroids.shape is
torch.Size([24, 64])
distance.shape is
torch.Size([24, 256])
farthest.shape is
torch.Size([24])
batch_indices.shape is
torch.Size([24])
npoint is 
64


centroid.shape is
torch.Size([24, 1, 3])
fps_idx is torch.Size([24, 64])
tensor([[208,   3, 107,  ..., 190,  69,  73],
        [210,   3,  24,  ...,  68,  22,  34],
        [173,   2,   1,  ..., 241, 219, 253],
        ...,
        [229,   2,   1,  ...,  63,  78, 245],
        [ 37,   5,  69,  ...,  78,  26,  40],
        [195,   7,   6,  ...,  63,  65,  66]], device='cuda:0')


torch.Size([24, 64, 3])
in this function, sample_and_group
xyz.shape is torch.Size([24, 64, 3])
points.shape is torch.Size([24, 64, 256])
npoint 16
radius 0.8
nsample 32
farthest_point_sample begin
xyz.shape is
torch.Size([24, 64, 3])
centroids.shape is
torch.Size([24, 16])
distance.shape is
torch.Size([24, 64])
farthest.shape is
torch.Size([24])
batch_indices.shape is
torch.Size([24])
npoint is 
16


centroid.shape is
torch.Size([24, 1, 3])
fps_idx is torch.Size([24, 16])
tensor([[32,  1, 51, 26,  6,  3, 56,  0, 29, 44, 24, 53, 37, 14, 18, 17],
        [61,  5,  7, 50,  2,  6,  3, 46, 11,  8, 10,  9,  4, 16, 14, 15],
        [ 2,  1, 20, 40, 24,  6, 51, 13, 36,  5, 12, 18, 54, 56, 63, 16],
        [55,  5,  4,  6, 40,  2,  3,  8, 14,  9, 10, 11,  7, 12, 13, 15],
        [ 8,  7,  5,  9, 27, 48, 38, 40,  4,  3, 63, 13, 14, 15, 43, 24],
        [25,  1,  2,  4,  5,  7,  3,  6, 16, 48, 39, 11, 12, 17, 14, 15],
        [57,  6, 33,  4, 21,  5, 18,  1, 34,  3, 36, 12, 54, 15, 16, 30],
        [49,  7,  6,  9,  3, 23,  2,  1, 21, 63, 11, 39, 13, 14, 16, 17],
        [18, 46, 21,  6, 38,  0,  2, 45, 61, 56, 19, 17,  1, 23, 62, 10],
        [43, 14, 29, 10,  3,  5, 20, 52,  4,  1, 23, 11, 40, 58, 48,  0],
        [ 1, 45,  2,  3,  8,  4,  5,  6,  7, 15, 10, 62, 11, 12, 13, 14],
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15],
        [63, 16,  4,  3,  2,  5,  7, 24,  9,  8, 11, 21,  6, 12,  1, 13],
        [47,  2,  1,  4, 19, 36,  5, 29, 44,  9, 25, 14, 22, 31, 18, 33],
        [ 5,  4,  7,  6, 52, 27,  1,  2, 10, 11,  3, 12,  9, 13, 14, 15],
        [ 4, 26, 33,  5, 14,  8, 16,  7, 15, 35, 27, 39, 56, 59, 10,  9],
        [25, 37, 23,  3,  9, 58,  7,  5, 17,  4, 57, 10, 46, 14, 16, 33],
        [46,  1,  2, 34, 23, 53, 35, 56,  8, 32, 38, 21, 29, 41,  3, 19],
        [58,  1,  2,  3,  5,  6,  7,  4,  8, 10, 20, 59, 11, 13, 14, 15],
        [45, 20,  5,  2,  4,  3, 17,  6, 39,  8, 11, 38, 52, 14, 12, 48],
        [30,  7,  6,  2,  4, 19,  3,  5, 44,  8, 10, 11, 12, 13, 15, 52],
        [53, 13,  3,  8, 12,  2,  4, 31,  9,  7, 38,  5,  1, 15, 14, 16],
        [22,  1, 52,  3,  4,  5,  6, 10,  8, 49, 12, 60, 14, 15, 56, 16],
        [ 6, 63,  7,  5, 10,  2, 15,  3, 27, 38,  9, 41, 49,  8, 25, 21]],
       device='cuda:0')


