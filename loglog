Load data...
train_data (16733, 4096, 9) train_label (16733, 4096)
test_data (6852, 4096, 9) test_label (6852, 4096)
GACNet(
  (sa1): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(9, 32, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa2): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa3): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (sa4): GraphAttentionConvLayer(
    (mlp_convs): ModuleList(
      (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (GAT): GraphAttention(
      (leakyrelu): LeakyReLU(negative_slope=0.2)
    )
  )
  (fp4): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp3): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(384, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp2): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(320, 256, kernel_size=(1,), stride=(1,))
      (1): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (fp1): PointNetFeaturePropagation(
    (mlp_convs): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (2): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    )
    (mlp_bns): ModuleList(
      (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (conv1): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
  (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (drop1): Dropout(p=0, inplace=False)
  (conv2): Conv1d(128, 13, kernel_size=(1,), stride=(1,))
)
Training from scratch
torch.Size([24, 4096, 9])
torch.float32
torch.Size([24, 4096])
torch.uint8
torch.float32
torch.int64
torch.Size([24, 9, 4096])
torch.Size([24, 9, 4096])
torch.float32
torch.Size([24, 4096])
torch.int64
torch.Size([24, 3, 4096])
torch.float32
tensor([[[ 3.8400e-01,  3.0600e-01,  3.9400e-01,  ..., -3.1600e-01,
           3.3000e-01,  2.6600e-01],
         [ 3.5400e-01, -4.9500e-01,  3.3500e-01,  ...,  2.0800e-01,
          -3.7900e-01,  1.0600e-01],
         [ 2.2800e+00,  1.6950e+00,  2.7030e+00,  ...,  3.0100e+00,
           2.9610e+00,  3.0060e+00]],

        [[ 2.1200e-01,  5.1000e-02,  3.3700e-01,  ...,  3.0800e-01,
           4.5400e-01, -3.2900e-01],
         [ 3.2000e-01, -2.1100e-01,  3.2400e-01,  ...,  1.6700e-01,
          -1.3000e-02, -2.2500e-01],
         [ 9.3100e-01,  3.0320e+00,  3.0320e+00,  ...,  9.3900e-01,
           3.0240e+00,  9.0400e-01]],

        [[-3.8900e-01, -4.2300e-01,  1.5100e-01,  ..., -3.1200e-01,
           1.6900e-01, -1.5200e-01],
         [ 3.2100e-01,  7.6000e-02, -4.8500e-01,  ..., -3.6700e-01,
           4.3300e-01,  2.5800e-01],
         [ 3.1900e-01,  3.1790e+00,  4.2200e-01,  ...,  4.3300e-01,
           3.9000e-02,  3.1690e+00]],

        ...,

        [[-2.2100e-01,  3.6000e-02,  1.3400e-01,  ..., -1.9700e-01,
           4.0000e-03, -1.9000e-01],
         [ 9.3000e-02,  2.5800e-01,  2.5600e-01,  ...,  2.6400e-01,
           2.6600e-01,  2.6200e-01],
         [ 8.6000e-02,  1.8510e+00,  1.8140e+00,  ...,  7.7900e-01,
           1.9200e-01,  1.4220e+00]],

        [[-2.7600e-01, -4.1100e-01,  3.5800e-01,  ...,  1.7900e-01,
          -2.8800e-01, -4.0400e-01],
         [ 2.3900e-01, -2.1400e-01,  2.4000e-01,  ...,  2.2900e-01,
           2.4800e-01,  8.6000e-02],
         [ 1.5050e+00,  1.9000e-02,  1.6350e+00,  ...,  1.0720e+00,
           2.1450e+00,  1.2000e-02]],

        [[ 3.3200e-01,  1.8300e-01,  3.4300e-01,  ...,  3.2500e-01,
          -6.8000e-02,  2.6000e-02],
         [ 1.8300e-01,  3.6900e-01,  1.0100e-01,  ..., -4.0400e-01,
           4.2100e-01, -5.4000e-02],
         [ 4.0150e+00,  2.4330e+00,  4.9730e+00,  ...,  3.8160e+00,
           5.7460e+00,  6.0530e+00]]], device='cuda:0')
torch.Size([24, 6, 4096])
torch.float32
tensor([[[0.9020, 0.7843, 0.9020,  ..., 0.5804, 0.5922, 0.3608],
         [0.9059, 0.7882, 0.8784,  ..., 0.5255, 0.5490, 0.3294],
         [0.8824, 0.7569, 0.8235,  ..., 0.4196, 0.4706, 0.2784],
         [0.9990, 0.9949, 0.9995,  ..., 0.9629, 0.9962, 0.9929],
         [0.0892, 0.0333, 0.0880,  ..., 0.0796, 0.0409, 0.0729],
         [0.5634, 0.4188, 0.6679,  ..., 0.7438, 0.7317, 0.7428]],

        [[0.3569, 0.5608, 0.5647,  ..., 0.3882, 0.5843, 0.3922],
         [0.3451, 0.5255, 0.5098,  ..., 0.3922, 0.5373, 0.3882],
         [0.3176, 0.4118, 0.4078,  ..., 0.3608, 0.4431, 0.3686],
         [0.9128, 0.9045, 0.9192,  ..., 0.9177, 0.9253, 0.8849],
         [0.1199, 0.0849, 0.1202,  ..., 0.1098, 0.0980, 0.0840],
         [0.2300, 0.7492, 0.7492,  ..., 0.2320, 0.7472, 0.2234]],

        [[0.1176, 0.2471, 0.7569,  ..., 0.8627, 0.4235, 0.4745],
         [0.1137, 0.2118, 0.7373,  ..., 0.7961, 0.4157, 0.3843],
         [0.1059, 0.1529, 0.6235,  ..., 0.6157, 0.3569, 0.2196],
         [0.1293, 0.1272, 0.1624,  ..., 0.1340, 0.1635, 0.1438],
         [0.7630, 0.7457, 0.7061,  ..., 0.7145, 0.7709, 0.7585],
         [0.0844, 0.8408, 0.1116,  ..., 0.1145, 0.0103, 0.8381]],

        ...,

        [[0.5765, 0.5569, 0.6824,  ..., 0.4706, 0.2667, 0.5608],
         [0.6196, 0.3882, 0.5059,  ..., 0.3294, 0.1882, 0.3686],
         [0.5961, 0.2549, 0.3765,  ..., 0.1882, 0.0941, 0.2392],
         [0.8073, 0.8705, 0.8947,  ..., 0.8132, 0.8627, 0.8149],
         [0.2833, 0.3487, 0.3479,  ..., 0.3510, 0.3518, 0.3502],
         [0.0339, 0.7293, 0.7147,  ..., 0.3069, 0.0757, 0.5603]],

        [[0.7020, 0.7451, 0.7176,  ..., 0.7412, 0.7294, 0.7176],
         [0.6000, 0.5843, 0.6118,  ..., 0.6275, 0.6118, 0.5490],
         [0.4549, 0.4118, 0.4941,  ..., 0.4549, 0.4706, 0.3843],
         [0.3898, 0.3468, 0.5917,  ..., 0.5347, 0.3860, 0.3490],
         [0.9842, 0.7278, 0.9847,  ..., 0.9785, 0.9892, 0.8976],
         [0.6086, 0.0077, 0.6611,  ..., 0.4335, 0.8674, 0.0049]],

        [[0.6353, 0.6078, 0.6431,  ..., 0.6275, 0.4510, 0.4941],
         [0.6392, 0.5882, 0.6549,  ..., 0.6353, 0.4431, 0.4902],
         [0.6196, 0.5098, 0.6118,  ..., 0.6235, 0.3451, 0.3804],
         [0.9743, 0.9307, 0.9775,  ..., 0.9722, 0.8574, 0.8848],
         [0.4666, 0.4990, 0.4523,  ..., 0.3645, 0.5080, 0.4254],
         [0.6285, 0.3809, 0.7785,  ..., 0.5974, 0.8995, 0.9476]]],
       device='cuda:0')
in GACNet, you will get xyz and point
torch.Size([24, 3, 4096])
torch.Size([24, 6, 4096])
tensor([[[ 3.8400e-01,  3.0600e-01,  3.9400e-01,  ..., -3.1600e-01,
           3.3000e-01,  2.6600e-01],
         [ 3.5400e-01, -4.9500e-01,  3.3500e-01,  ...,  2.0800e-01,
          -3.7900e-01,  1.0600e-01],
         [ 2.2800e+00,  1.6950e+00,  2.7030e+00,  ...,  3.0100e+00,
           2.9610e+00,  3.0060e+00]],

        [[ 2.1200e-01,  5.1000e-02,  3.3700e-01,  ...,  3.0800e-01,
           4.5400e-01, -3.2900e-01],
         [ 3.2000e-01, -2.1100e-01,  3.2400e-01,  ...,  1.6700e-01,
          -1.3000e-02, -2.2500e-01],
         [ 9.3100e-01,  3.0320e+00,  3.0320e+00,  ...,  9.3900e-01,
           3.0240e+00,  9.0400e-01]],

        [[-3.8900e-01, -4.2300e-01,  1.5100e-01,  ..., -3.1200e-01,
           1.6900e-01, -1.5200e-01],
         [ 3.2100e-01,  7.6000e-02, -4.8500e-01,  ..., -3.6700e-01,
           4.3300e-01,  2.5800e-01],
         [ 3.1900e-01,  3.1790e+00,  4.2200e-01,  ...,  4.3300e-01,
           3.9000e-02,  3.1690e+00]],

        ...,

        [[-2.2100e-01,  3.6000e-02,  1.3400e-01,  ..., -1.9700e-01,
           4.0000e-03, -1.9000e-01],
         [ 9.3000e-02,  2.5800e-01,  2.5600e-01,  ...,  2.6400e-01,
           2.6600e-01,  2.6200e-01],
         [ 8.6000e-02,  1.8510e+00,  1.8140e+00,  ...,  7.7900e-01,
           1.9200e-01,  1.4220e+00]],

        [[-2.7600e-01, -4.1100e-01,  3.5800e-01,  ...,  1.7900e-01,
          -2.8800e-01, -4.0400e-01],
         [ 2.3900e-01, -2.1400e-01,  2.4000e-01,  ...,  2.2900e-01,
           2.4800e-01,  8.6000e-02],
         [ 1.5050e+00,  1.9000e-02,  1.6350e+00,  ...,  1.0720e+00,
           2.1450e+00,  1.2000e-02]],

        [[ 3.3200e-01,  1.8300e-01,  3.4300e-01,  ...,  3.2500e-01,
          -6.8000e-02,  2.6000e-02],
         [ 1.8300e-01,  3.6900e-01,  1.0100e-01,  ..., -4.0400e-01,
           4.2100e-01, -5.4000e-02],
         [ 4.0150e+00,  2.4330e+00,  4.9730e+00,  ...,  3.8160e+00,
           5.7460e+00,  6.0530e+00]]], device='cuda:0')
tensor([[[0.9020, 0.7843, 0.9020,  ..., 0.5804, 0.5922, 0.3608],
         [0.9059, 0.7882, 0.8784,  ..., 0.5255, 0.5490, 0.3294],
         [0.8824, 0.7569, 0.8235,  ..., 0.4196, 0.4706, 0.2784],
         [0.9990, 0.9949, 0.9995,  ..., 0.9629, 0.9962, 0.9929],
         [0.0892, 0.0333, 0.0880,  ..., 0.0796, 0.0409, 0.0729],
         [0.5634, 0.4188, 0.6679,  ..., 0.7438, 0.7317, 0.7428]],

        [[0.3569, 0.5608, 0.5647,  ..., 0.3882, 0.5843, 0.3922],
         [0.3451, 0.5255, 0.5098,  ..., 0.3922, 0.5373, 0.3882],
         [0.3176, 0.4118, 0.4078,  ..., 0.3608, 0.4431, 0.3686],
         [0.9128, 0.9045, 0.9192,  ..., 0.9177, 0.9253, 0.8849],
         [0.1199, 0.0849, 0.1202,  ..., 0.1098, 0.0980, 0.0840],
         [0.2300, 0.7492, 0.7492,  ..., 0.2320, 0.7472, 0.2234]],

        [[0.1176, 0.2471, 0.7569,  ..., 0.8627, 0.4235, 0.4745],
         [0.1137, 0.2118, 0.7373,  ..., 0.7961, 0.4157, 0.3843],
         [0.1059, 0.1529, 0.6235,  ..., 0.6157, 0.3569, 0.2196],
         [0.1293, 0.1272, 0.1624,  ..., 0.1340, 0.1635, 0.1438],
         [0.7630, 0.7457, 0.7061,  ..., 0.7145, 0.7709, 0.7585],
         [0.0844, 0.8408, 0.1116,  ..., 0.1145, 0.0103, 0.8381]],

        ...,

        [[0.5765, 0.5569, 0.6824,  ..., 0.4706, 0.2667, 0.5608],
         [0.6196, 0.3882, 0.5059,  ..., 0.3294, 0.1882, 0.3686],
         [0.5961, 0.2549, 0.3765,  ..., 0.1882, 0.0941, 0.2392],
         [0.8073, 0.8705, 0.8947,  ..., 0.8132, 0.8627, 0.8149],
         [0.2833, 0.3487, 0.3479,  ..., 0.3510, 0.3518, 0.3502],
         [0.0339, 0.7293, 0.7147,  ..., 0.3069, 0.0757, 0.5603]],

        [[0.7020, 0.7451, 0.7176,  ..., 0.7412, 0.7294, 0.7176],
         [0.6000, 0.5843, 0.6118,  ..., 0.6275, 0.6118, 0.5490],
         [0.4549, 0.4118, 0.4941,  ..., 0.4549, 0.4706, 0.3843],
         [0.3898, 0.3468, 0.5917,  ..., 0.5347, 0.3860, 0.3490],
         [0.9842, 0.7278, 0.9847,  ..., 0.9785, 0.9892, 0.8976],
         [0.6086, 0.0077, 0.6611,  ..., 0.4335, 0.8674, 0.0049]],

        [[0.6353, 0.6078, 0.6431,  ..., 0.6275, 0.4510, 0.4941],
         [0.6392, 0.5882, 0.6549,  ..., 0.6353, 0.4431, 0.4902],
         [0.6196, 0.5098, 0.6118,  ..., 0.6235, 0.3451, 0.3804],
         [0.9743, 0.9307, 0.9775,  ..., 0.9722, 0.8574, 0.8848],
         [0.4666, 0.4990, 0.4523,  ..., 0.3645, 0.5080, 0.4254],
         [0.6285, 0.3809, 0.7785,  ..., 0.5974, 0.8995, 0.9476]]],
       device='cuda:0')
torch.Size([24, 4096, 3])
torch.Size([24, 4096, 3])
torch.Size([24, 4096, 6])
1024
0.1
32
farthest_point_sample begin
torch.Size([24, 4096, 3])
torch.Size([24, 1024])
torch.Size([24, 4096])
torch.Size([24])
torch.Size([24])
torch.Size([24, 1024, 3])
torch.Size([24, 1024, 3])
torch.Size([24, 1024, 64])
256
0.2
32
farthest_point_sample begin
torch.Size([24, 1024, 3])
torch.Size([24, 256])
torch.Size([24, 1024])
torch.Size([24])
torch.Size([24])
torch.Size([24, 256, 3])
torch.Size([24, 256, 3])
torch.Size([24, 256, 128])
64
0.4
32
farthest_point_sample begin
torch.Size([24, 256, 3])
torch.Size([24, 64])
torch.Size([24, 256])
torch.Size([24])
torch.Size([24])
torch.Size([24, 64, 3])
torch.Size([24, 64, 3])
torch.Size([24, 64, 256])
16
0.8
32
farthest_point_sample begin
torch.Size([24, 64, 3])
torch.Size([24, 16])
torch.Size([24, 64])
torch.Size([24])
torch.Size([24])
